import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import asyncio

API_TOKEN = os.getenv("API_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

CATEGORY_LIMITS = {
    "Gentlemen‚Äôs Amateur": 24,
    "Gentlemen‚Äôs Challenger": 12,
    "Gentlemen‚Äôs Master": 12,
    "Ladies Amateur": 12,
    "Ladies Challenger": 12,
    "Ladies Master": 12,
    "Mixed Amateur": 12,
    "Mixed Master": 12,
    "Gentlemen‚Äôs Doubles": 12,
    "Ladies‚Äô Doubles": 12
}
PAIR_CATEGORIES = [
    "Mixed Amateur", "Mixed Master",
    "Gentlemen‚Äôs Doubles", "Ladies‚Äô Doubles"
]

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
try:
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.prod.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–í—Å–µ –∑–∞—è–≤–∫–∏")
except Exception as e:
    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ:", e)
    sheet = None

class Form(StatesGroup):
    category = State()
    name = State()
    partner = State()
    confirmation = State()
    payment = State()

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –î–†–£–ì 2025!
–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—á–∞—Å—Ç–∏—è:",
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                             *[types.KeyboardButton(c) for c in CATEGORY_LIMITS.keys()]
                         ))
    await Form.category.set()

@dp.message_handler(state=Form.category)
async def process_category(message: types.Message, state: FSMContext):
    category = message.text
    if category not in CATEGORY_LIMITS:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(category=category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await Form.next()

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    if data["category"] in PAIR_CATEGORIES:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:")
        await Form.next()
    else:
        await state.update_data(partner="-")
        await ask_slot_availability(message, state)

@dp.message_handler(state=Form.partner)
async def process_partner(message: types.Message, state: FSMContext):
    await state.update_data(partner=message.text)
    await ask_slot_availability(message, state)

async def ask_slot_availability(message, state):
    data = await state.get_data()
    category = data["category"]
    registered = len([row for row in sheet.get_all_records() if row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") == category])
    if registered < CATEGORY_LIMITS[category]:
        await message.answer("‚úÖ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç–∫—É?",
                             reply_markup=yes_no_kb())
    else:
        await message.answer("‚ùå –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è?",
                             reply_markup=yes_no_kb())
    await Form.confirmation.set()

@dp.message_handler(state=Form.confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'")
    data = await state.get_data()
    row = [data["category"], data["name"], data["partner"], message.from_user.id, message.from_user.username or "", message.text.lower(), "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É"]
    try:
        sheet.append_row(row)
    except:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É.")
    await message.answer("üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤–∑–Ω–æ—Å –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:

"
                         "**–†–µ–∫–≤–∏–∑–∏—Ç—ã:**
–°–±–µ—Ä–±–∞–Ω–∫: 2202 2023 4567 1234

"
                         "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ —Å—é–¥–∞.")
    await Form.payment.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.payment)
async def process_payment(message: types.Message, state: FSMContext):
    await message.answer("–°–ø–∞—Å–∏–±–æ! üßæ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.finish()

def yes_no_kb():
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")

async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
