import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
SPREADSHEET_NAME = '–î—Ä—É–≥ 2025'

CATEGORY_LIMITS = {
    "Gentlemen‚Äôs Amateur": 24,
    "Gentlemen‚Äôs Challenger": 12,
    "Gentlemen‚Äôs Master": 12,
    "Ladies Amateur": 12,
    "Ladies Challenger": 12,
    "Ladies Master": 12,
    "Mixed Amateur": 12,
    "Mixed Master": 12,
    "Gentlemen‚Äôs Doubles": 12,
    "Ladies‚Äô Doubles": 12
}

CATEGORIES = list(CATEGORY_LIMITS.keys())

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.prod.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).worksheet("–í—Å–µ –∑–∞—è–≤–∫–∏")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

def get_registered_count(category):
    records = sheet.get_all_records()
    return sum(1 for r in records if r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category and r['–¢–∏–ø —É—á–∞—Å—Ç–∏—è'] == '–û—Å–Ω–æ–≤–Ω–æ–π')

def get_category_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in CATEGORIES:
        markup.add(KeyboardButton(cat))
    return markup

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –î–†–£–ì 2025!

"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—á–∞—Å—Ç–∏—è:",
        reply_markup=get_category_keyboard()
    )
    user_data[message.chat.id] = {}

@dp.message_handler(lambda msg: msg.text in CATEGORIES)
async def category_handler(msg: types.Message):
    user_data[msg.chat.id]['category'] = msg.text
    await msg.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û –ò–≥—Ä–æ–∫–∞ 1)", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda msg: 'category' in user_data.get(msg.chat.id, {}) and 'name1' not in user_data[msg.chat.id])
async def name1_handler(msg: types.Message):
    user_data[msg.chat.id]['name1'] = msg.text
    category = user_data[msg.chat.id]['category']
    if "Doubles" in category or "Mixed" in category:
        await msg.answer("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞?")
    else:
        user_data[msg.chat.id]['name2'] = ""
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(lambda msg: 'name1' in user_data.get(msg.chat.id, {}) and 'name2' not in user_data[msg.chat.id] and (
    "Doubles" in user_data[msg.chat.id]['category'] or "Mixed" in user_data[msg.chat.id]['category']
))
async def name2_handler(msg: types.Message):
    user_data[msg.chat.id]['name2'] = msg.text
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(lambda msg: 'name2' in user_data.get(msg.chat.id, {}) and 'phone' not in user_data[msg.chat.id])
async def phone_handler(msg: types.Message):
    user_data[msg.chat.id]['phone'] = msg.text
    await msg.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Telegram (@username):")

@dp.message_handler(lambda msg: 'phone' in user_data.get(msg.chat.id, {}) and 'telegram' not in user_data[msg.chat.id])
async def telegram_handler(msg: types.Message):
    user_data[msg.chat.id]['telegram'] = msg.text
    data = user_data[msg.chat.id]
    category = data['category']
    registered = get_registered_count(category)
    limit = CATEGORY_LIMITS[category]

    slot_type = "–û—Å–Ω–æ–≤–Ω–æ–π" if registered < limit else "–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è"
    user_data[msg.chat.id]['slot'] = slot_type

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = [now, category, data['name1'], data.get('name2', ""), data['phone'], data['telegram'], slot_type, "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", ""]
    sheet.append_row(row)

    if slot_type == "–û—Å–Ω–æ–≤–Ω–æ–π":
        await msg.answer(
            "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Ç–∫—É.

"
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 1000‚ÇΩ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:

"
            "üí≥ *–°–ë–ü/–¢–∏–Ω—å–∫–æ—Ñ—Ñ*: 1234567890123456
"
            "üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: –ò–≤–∞–Ω–æ–≤ –ò.–ò.

"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ —Å—é–¥–∞.",
            parse_mode="Markdown"
        )
    else:
        await msg.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_payment_photo(msg: types.Message):
    photo_id = msg.photo[-1].file_id
    records = sheet.get_all_records()
    telegram = msg.from_user.username or user_data[msg.chat.id].get('telegram')
    for idx, row in enumerate(records, start=2):
        if row['Telegram'] == telegram and row['–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'] == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ":
            sheet.update_cell(idx, 8, "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            sheet.update_cell(idx, 9, photo_id)
            await msg.answer("–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
    await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏–ª–∏ —á–µ–∫ —É–∂–µ –ø–æ–ª—É—á–µ–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
